<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CKFinder</name>
    </assembly>
    <members>
        <member name="T:CKFinder.Connector.Connector">
            <summary>
            The class handles all requests sent to the CKFinder connector file,
            connector.aspx.
            </summary>
        </member>
        <member name="F:CKFinder.Connector.Connector.ConfigFile">
            <summary>
            The "ConfigFile" object, is the instance of config.ascx, present in
            the connector.aspx file. It makes it possible to configure CKFinder
            whithout having to compile it.
            </summary>
        </member>
        <member name="P:CKFinder.Connector.Connector.EnableTheming">
            <summary>
            Theming is disabled as it interferes in the connector response data.
            </summary>
        </member>
        <member name="P:CKFinder.Connector.Connector.MasterPageFile">
            <summary>
            Master Page is disabled as it interferes in the connector response data.
            </summary>
        </member>
        <member name="P:CKFinder.Connector.Connector.Theme">
            <summary>
            Theming is disabled as it interferes in the connector response data.
            </summary>
        </member>
        <member name="P:CKFinder.Connector.Connector.StyleSheetTheme">
            <summary>
            Theming is disabled as it interferes in the connector response data.
            </summary>
        </member>
        <member name="M:CKFinder.Connector.Util.CreateDirectory(System.String)">
            <summary>
            This method should provide safe substitude for Directory.CreateDirectory().
            </summary>
            <param name="path">The directory path to be created.</param>
            <returns>A <see cref="T:System.IO.DirectoryInfo"/> object for the created directory.</returns>
            <remarks>
            	<para>
            	This method creates all the directory structure if needed.
            	</para>
            	<para>
            	The System.IO.Directory.CreateDirectory() method has a bug that gives an
            	error when trying to create a directory and the user has no rights defined
            	in one of its parent directories. The CreateDirectory() should be a good 
            	replacement to solve this problem.
            	</para>
            </remarks>
        </member>
        <member name="M:CKFinder.Connector.Util.GetMd5Hash(System.String)">
            <summary>
             Hash an input string and return the hash as
             a 32 character hexadecimal string.
             </summary>
        </member>
        <member name="T:ImageManipulation.OctreeQuantizer">
            <summary>
            Quantize using an Octree
            </summary>
        </member>
        <member name="T:ImageManipulation.Quantizer">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:ImageManipulation.Quantizer.#ctor(System.Boolean)">
            <summary>
            Construct the quantizer
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:ImageManipulation.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:ImageManipulation.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:ImageManipulation.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:ImageManipulation.Quantizer.InitialQuantizePixel(ImageManipulation.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:ImageManipulation.Quantizer.QuantizePixel(ImageManipulation.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:ImageManipulation.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:ImageManipulation.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="T:ImageManipulation.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="F:ImageManipulation.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:ImageManipulation.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:ImageManipulation.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:ImageManipulation.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:ImageManipulation.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:ImageManipulation.Quantizer.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.InitialQuantizePixel(ImageManipulation.Quantizer.Color32)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.QuantizePixel(ImageManipulation.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="T:ImageManipulation.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.AddColor(ImageManipulation.Quantizer.Color32)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.TrackPrevious(ImageManipulation.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.GetPaletteIndex(ImageManipulation.Quantizer.Color32)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="P:ImageManipulation.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:ImageManipulation.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="T:ImageManipulation.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,ImageManipulation.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.OctreeNode.AddColor(ImageManipulation.Quantizer.Color32,System.Int32,System.Int32,ImageManipulation.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(ImageManipulation.Quantizer.Color32,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:ImageManipulation.OctreeQuantizer.Octree.OctreeNode.Increment(ImageManipulation.Quantizer.Color32)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:ImageManipulation.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="P:ImageManipulation.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:ImageManipulation.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="T:CKFinder.Utils.StopAppDomainRestartModule">
            <summary> 
                Disable AppDomain restarts when folder is deleted.
                https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=240686
            </summary> 
        </member>
    </members>
</doc>
